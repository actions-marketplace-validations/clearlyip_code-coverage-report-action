{"version":3,"file":"index.js","mappingsxLA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AAOA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxBA;AA0BA;;;;;AAKA;AACA;;;;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;AACA;;AACA;AAEA;;;;;AAKA;AACA;;AACA;AAOA;AACA;AACA;AACA;AAIA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;AC1DA;AAAA;AACA;AACA;AAwBA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;ACAA;AAQA;;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAAA;AA5BA;;;;;;;;;;;;ACoDA;AAAA;AACA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;;;AAIA;AACA;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAPA;AASA;;;;AAIA;AACA;;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnBA;AAqBA;;;;;;AAMA;AACA;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;AAKA;AAGA;AACA;AACA;AACA;AACA;AAPA;;AASA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;;;;;;;;;AACA;;;;;;;;;AAEA;AAKA;;AACA;AA9FA;AAgGA;;;;;AAKA;AACA;;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AAAA;AArBA;AAuBA;;;;AAIA;AACA;;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AA3BA;AA6BA;AACA;AACA;AAFA;AAIA;;;;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;;;;;;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAzBA;AA2BA;;;;;;AAMA;AACA;AAIA;;;;;AAKA;AACA;AAEA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAhCA;AAkCA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAjDA;AAmDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AE7BA;AACA;AACA;AACA","sources":["../webpack://code-coverage-report-action/./src/main.ts","../webpack://code-coverage-report-action/./src/reports/clover/index.ts","../webpack://code-coverage-report-action/./src/reports/clover/parser/index.ts","../webpack://code-coverage-report-action/./src/reports/clover/types/index.ts","../webpack://code-coverage-report-action/./src/reports/cobertura/index.ts","../webpack://code-coverage-report-action/./src/reports/cobertura/parser/index.ts","../webpack://code-coverage-report-action/./src/reports/cobertura/types/index.ts","../webpack://code-coverage-report-action/./src/utils.ts","../webpack://code-coverage-report-action/webpack/bootstrap","../webpack://code-coverage-report-action/webpack/before-startup","../webpack://code-coverage-report-action/webpack/startup","../webpack://code-coverage-report-action/webpack/after-startup"],"sourcesContent":["import * as core from '@actions/core'\nimport {\n  checkFileExists,\n  colorizePercentageByThreshold,\n  downloadArtifacts,\n  getInputs,\n  parseCoverage,\n  uploadArtifacts\n} from './utils'\nimport {Coverage} from './interfaces'\nimport {writeFile} from 'fs/promises'\nimport path from 'path'\n\nasync function run(): Promise<void> {\n  try {\n    const filename = core.getInput('filename')\n\n    if (!(await checkFileExists(filename))) {\n      core.setFailed(`Unable to access ${filename}`)\n      return\n    }\n\n    switch (process.env.GITHUB_EVENT_NAME) {\n      case 'pull_request': {\n        const {GITHUB_BASE_REF = ''} = process.env\n        const artifactPath = await downloadArtifacts(GITHUB_BASE_REF)\n        const baseCoverage =\n          artifactPath !== null\n            ? await parseCoverage(path.join(artifactPath, filename))\n            : null\n        const headCoverage = await parseCoverage(filename)\n\n        if (headCoverage === null) {\n          core.setFailed(`Unable to process ${filename}`)\n          return\n        }\n\n        //Base doesnt have an artifact\n        if (baseCoverage === null) {\n          core.warning(\n            `${GITHUB_BASE_REF} is missing ${filename}. See documentation on how to add this`\n          )\n          await generateMarkdown(headCoverage)\n          return\n        }\n\n        await generateMarkdown(headCoverage, baseCoverage)\n        break\n      }\n      case 'push':\n      case 'schedule':\n      case 'workflow_dispatch':\n        {\n          const {GITHUB_REF_NAME = ''} = process.env\n          core.info(`Uploading ${filename}`)\n          await uploadArtifacts([filename], GITHUB_REF_NAME)\n          core.info(`Complete`)\n        }\n        break\n      default:\n      //TODO: return something here\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (err: any) {\n    core.setFailed(err.message)\n  }\n}\n\nasync function generateMarkdown(\n  headCoverage: Coverage,\n  baseCoverage: Coverage | null = null\n): Promise<void> {\n  const {\n    overallCoverageFailThreshold,\n    failOnNegativeDifference,\n    fileCoverageErrorMin,\n    fileCoverageWarningMax,\n    badge,\n    markdownFilename\n  } = getInputs()\n  const map = Object.entries(headCoverage.files).map(([hash, file]) => {\n    if (baseCoverage === null) {\n      return [\n        file.relative,\n        `${colorizePercentageByThreshold(\n          file.coverage,\n          fileCoverageWarningMax,\n          fileCoverageErrorMin\n        )}`\n      ]\n    }\n\n    const baseCoveragePercentage = baseCoverage.files[hash]\n      ? baseCoverage.files[hash].coverage\n      : null\n\n    const differencePercentage = baseCoverage.files[hash]\n      ? headCoverage.files[hash].coverage - baseCoverage.files[hash].coverage\n      : null\n\n    if (\n      failOnNegativeDifference &&\n      differencePercentage !== null &&\n      differencePercentage < 0\n    ) {\n      core.setFailed(\n        `${headCoverage.files[hash].relative} coverage difference was ${differencePercentage}%`\n      )\n    }\n\n    return [\n      file.relative,\n      `${colorizePercentageByThreshold(\n        baseCoveragePercentage,\n        fileCoverageWarningMax,\n        fileCoverageErrorMin\n      )}`,\n      `${colorizePercentageByThreshold(\n        file.coverage,\n        fileCoverageWarningMax,\n        fileCoverageErrorMin\n      )}`,\n      colorizePercentageByThreshold(differencePercentage)\n    ]\n  })\n\n  if (overallCoverageFailThreshold > headCoverage.coverage) {\n    core.setFailed(\n      `FAIL: Overall coverage of ${headCoverage.coverage.toString()}% below minimum threshold of ${overallCoverageFailThreshold.toString()}%`\n    )\n  }\n\n  let color = 'grey'\n  if (headCoverage.coverage < fileCoverageErrorMin) {\n    color = 'red'\n  } else if (\n    headCoverage.coverage > fileCoverageErrorMin &&\n    headCoverage.coverage < fileCoverageWarningMax\n  ) {\n    color = 'orange'\n  } else if (headCoverage.coverage > fileCoverageWarningMax) {\n    color = 'green'\n  }\n\n  const summary = core.summary.addHeading('Code Coverage Report')\n\n  const headers =\n    baseCoverage === null\n      ? [\n          {data: 'Package', header: true},\n          {data: 'Coverage', header: true}\n        ]\n      : [\n          {data: 'Package', header: true},\n          {data: 'Base Coverage', header: true},\n          {data: 'New Coverage', header: true},\n          {data: 'Difference', header: true}\n        ]\n\n  if (badge) {\n    summary.addImage(\n      `https://img.shields.io/badge/${encodeURIComponent(\n        `Code Coverage-${headCoverage.coverage}%-${color}`\n      )}?style=flat`,\n      'Code Coverage'\n    )\n  }\n  summary\n    .addTable([headers, ...map])\n    .addBreak()\n    .addRaw(\n      `<i>Minimum allowed coverage is</i> <code>${overallCoverageFailThreshold}%</code>, this run produced</i> <code>${headCoverage.coverage}%</code>`\n    )\n\n  //If this is run after write the buffer is empty\n  core.info(`Writing results to ${markdownFilename}.md`)\n  await writeFile(`${markdownFilename}.md`, summary.stringify())\n  core.setOutput('file', `${markdownFilename}.md`)\n  core.setOutput('coverage', headCoverage.coverage)\n\n  core.info(`Writing job summary`)\n  await summary.write()\n}\n\nrun()\n","export {default as parse} from './parser'\nexport * from './types'\n","import {Clover, File, FileMetrics, Package} from '../types'\nimport {Coverage, Files} from '../../../interfaces'\nimport {\n  determineCommonBasePath,\n  roundPercentage,\n  createHash,\n  escapeRegExp\n} from '../../../utils'\n\nexport default async function parse(clover: Clover): Promise<Coverage> {\n  const {metrics, '@_timestamp': timestamp} = clover.coverage.project\n\n  let files: Files = {}\n  if (clover.coverage.project.package) {\n    files = await parsePackages(clover.coverage.project.package)\n  }\n  if (clover.coverage.project.file) {\n    files = await parseFiles(clover.coverage.project.file)\n  }\n\n  const fileList = Object.values(files).map(file => file.absolute)\n  const basePath = `${determineCommonBasePath(fileList)}`\n  const regExp = new RegExp(`^${escapeRegExp(`${basePath}/`)}`)\n\n  return {\n    files: Object.entries(files).reduce((previous, [hash, file]) => {\n      file.relative = file.absolute.replace(regExp, '')\n      return {...previous, [createHash(file.relative)]: file}\n    }, {}),\n    coverage: processCoverageMetrics(metrics),\n    timestamp: parseInt(timestamp),\n    basePath\n  }\n}\n\n/**\n * Parse Packages\n *\n * @param {Package[]} packages\n * @returns {Promise<Files>}\n */\nasync function parsePackages(packages: Package[]): Promise<Files> {\n  let allFiles: Files = {}\n  for await (const p of packages) {\n    if (!p.file) {\n      continue\n    }\n    const files = await parseFiles(p.file)\n\n    allFiles = {...allFiles, ...files}\n  }\n  return allFiles\n}\n\n/**\n * Process into an object\n *\n * @param {File[]} files\n * @returns {Promise<Files>}\n */\nasync function parseFiles(files: File[]): Promise<Files> {\n  return files.reduce(\n    (\n      previous,\n      {'@_name': name, metrics: fileMetrics, '@_path': path}: File\n    ) => ({\n      ...previous,\n      [createHash(path ?? name)]: {\n        relative: path ?? name,\n        absolute: path ?? name,\n        coverage: processCoverageMetrics(fileMetrics)\n      }\n    }),\n    {}\n  )\n}\n\n/**\n * Process Coverage Metrics from Clover\n *\n * See: https://confluence.atlassian.com/clover/how-are-the-clover-coverage-percentages-calculated-79986990.html\n *\n * @param metrics\n * @returns\n */\nfunction processCoverageMetrics(metrics: FileMetrics): number {\n  const coveredConditionals = parseInt(metrics['@_coveredconditionals'])\n  const coveredStatements = parseInt(metrics['@_coveredstatements'])\n  const coveredMethods = parseInt(metrics['@_coveredmethods'])\n  const conditionals = parseInt(metrics['@_conditionals'])\n  const statements = parseInt(metrics['@_statements'])\n  const methods = parseInt(metrics['@_methods'])\n\n  const coveredSum = coveredConditionals + coveredStatements + coveredMethods\n  const codeSum = conditionals + statements + methods\n\n  const codeCoveragePercentage =\n    codeSum > 0 ? (100.0 * coveredSum) / codeSum : 0\n\n  return roundPercentage(codeCoveragePercentage)\n}\n","export interface Clover {\n  '?xml': XML\n  coverage: Coverage\n}\n\nexport interface XML {\n  '@_version': string\n  '@_encoding': string\n}\n\nexport interface Coverage {\n  project: Project\n  '@_generated': string\n}\n\nexport interface Project {\n  file?: File[]\n  package?: Package[]\n  metrics: FileMetrics\n  '@_timestamp': string\n}\n\nexport interface File {\n  class?: Class\n  line?: Line[]\n  metrics: FileMetrics\n  '@_name': string\n  '@_path'?: string\n}\n\nexport interface Package {\n  '@_name': string\n  metrics: FileMetrics\n  file?: File[]\n}\n\nexport interface Class {\n  metrics: ClassMetrics\n  '@_name': string\n  '@_namespace': Namespace\n}\n\nexport enum Namespace {\n  Global = 'global'\n}\n\nexport interface ClassMetrics {\n  '@_complexity': string\n  '@_methods': string\n  '@_coveredmethods': string\n  '@_conditionals': string\n  '@_coveredconditionals': string\n  '@_statements': string\n  '@_coveredstatements': string\n  '@_elements': string\n  '@_coveredelements': string\n}\n\nexport interface Line {\n  '@_num': string\n  '@_type': Type\n  '@_name'?: string\n  '@_visibility'?: Visibility\n  '@_complexity'?: string\n  '@_crap'?: string\n  '@_count': string\n}\n\nexport enum Type {\n  Method = 'method',\n  Stmt = 'stmt'\n}\n\nexport enum Visibility {\n  Private = 'private',\n  Protected = 'protected',\n  Public = 'public'\n}\n\nexport interface FileMetrics {\n  '@_loc': string\n  '@_ncloc': string\n  '@_classes': string\n  '@_methods': string\n  '@_coveredmethods': string\n  '@_conditionals': string\n  '@_coveredconditionals': string\n  '@_statements': string\n  '@_coveredstatements': string\n  '@_elements': string\n  '@_coveredelements': string\n  '@_files'?: string\n}\n","export {default as parse} from './parser'\nexport * from './types'\n","import {Coverage} from '../../../interfaces'\nimport {\n  createHash,\n  determineCommonBasePath,\n  escapeRegExp,\n  roundPercentage\n} from '../../../utils'\nimport {Cobertura, Package} from '../types'\n\nexport default async function parse(cobertura: Cobertura): Promise<Coverage> {\n  const fileList = cobertura.coverage.packages.package.map(\n    ({'@_name': name}) => {\n      return name\n    }\n  )\n\n  const basePath = `${determineCommonBasePath(fileList)}`\n  const r = new RegExp(`^${escapeRegExp(`${basePath}/`)}`)\n\n  return {\n    files: cobertura.coverage.packages.package.reduce(\n      (previous, {'@_name': name, '@_line-rate': lineRate}: Package) => ({\n        ...previous,\n        [createHash(name.replace(r, ''))]: {\n          relative: name.replace(r, ''),\n          absolute: name,\n          coverage: roundPercentage(parseFloat(lineRate) * 100)\n        }\n      }),\n      {}\n    ),\n    coverage: roundPercentage(\n      parseFloat(cobertura.coverage['@_line-rate']) * 100\n    ),\n    timestamp: parseInt(cobertura.coverage['@_timestamp']),\n    basePath\n  }\n}\n","export interface Cobertura {\n  '?xml': XML\n  coverage: Coverage\n}\n\nexport interface XML {\n  '@_version': string\n  '@_encoding': string\n}\n\nexport interface Coverage {\n  sources: Sources\n  packages: Packages\n  '@_line-rate': string\n  '@_branch-rate': string\n  '@_version': string\n  '@_timestamp': string\n  '@_lines-covered': string\n  '@_lines-valid': string\n  '@_branches-covered': string\n  '@_branches-valid': string\n}\n\nexport interface Packages {\n  package: Package[]\n}\n\nexport interface Package {\n  classes: Classes\n  '@_name': string\n  '@_line-rate': string\n  '@_branch-rate': string\n  '@_complexity': string\n}\n\nexport interface Classes {\n  class: Class[]\n}\n\nexport interface Class {\n  methods: Methods\n  lines: Lines\n  '@_name': string\n  '@_filename': string\n  '@_line-rate': string\n  '@_branch-rate': string\n  '@_complexity': string\n}\n\nexport interface Lines {\n  line: LineElement[] | PurpleLine\n}\n\nexport interface LineElement {\n  '@_number': string\n  '@_hits': string\n  '@_branch'?: Boolean\n  conditions?: Conditions\n  '@_condition-coverage'?: string\n}\n\nexport enum Boolean {\n  False = 'False',\n  True = 'True'\n}\n\nexport interface Conditions {\n  condition: ConditionElement[] | ConditionElement\n}\n\nexport interface ConditionElement {\n  '@_number': string\n  '@_type'?: Type\n  '@_coverage': string\n}\n\nexport enum Type {\n  Jump = 'jump',\n  Switch = 'switch',\n  Method = 'method',\n  Statement = 'statement'\n}\n\nexport interface PurpleLine {\n  '@_number': string\n  '@_hits': string\n  '@_branch'?: Boolean\n}\n\nexport interface Methods {\n  method: MethodElement[] | MethodElement\n}\n\nexport interface MethodElement {\n  lines: Lines\n  '@_name': string\n  '@_signature': string\n  '@_line-rate': string\n  '@_branch-rate': string\n  '@_complexity': string\n}\n\nexport interface Sources {\n  source: string\n}\n","import {promises as fs, constants as fsConstants} from 'fs'\nimport {XMLParser} from 'fast-xml-parser'\nimport * as artifact from '@actions/artifact'\nimport * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport {Clover, parse as parseClover} from './reports/clover'\nimport {Cobertura, parse as parseCobertura} from './reports/cobertura'\nimport path from 'path'\nimport {Coverage, Inputs} from './interfaces'\nimport crypto from 'crypto'\nimport AdmZip from 'adm-zip'\n\nconst {access, readFile, mkdir} = fs\n\n/**\n * Check if a file exists\n * @param {string} filename\n * @returns {Promise<boolean>}\n */\nexport async function checkFileExists(filename: string): Promise<boolean> {\n  try {\n    await access(filename, fsConstants.F_OK)\n    return true\n    // eslint-disable-next-line no-empty\n  } catch (e) {}\n  return false\n}\n\n/**\n * Parse XML\n * @param {string} filename\n * @returns {Promise<T | null>}\n */\nexport async function parseXML<T>(filename: string): Promise<T | null> {\n  if (!(await checkFileExists(filename))) {\n    return null\n  }\n\n  const contents = await readFile(filename, 'binary')\n\n  return new XMLParser({\n    ignoreAttributes: false,\n    isArray: (name, jpath, isLeafNode, isAttribute) => {\n      if (isAttribute) {\n        return false\n      }\n      return inArray(jpath, [\n        'coverage.project.package',\n        'coverage.project.package.file'\n      ])\n    }\n  }).parse(contents)\n}\n\n/**\n * Download Artifacts\n *\n * @param {string} name\n * @param {string} base\n * @returns {Promise<string|null>}\n */\nexport async function downloadArtifacts(\n  name: string,\n  base = 'artifacts'\n): Promise<string | null> {\n  const {token, artifactDownloadWorkflowNames} = getInputs()\n  const client = github.getOctokit(token)\n  const artifactWorkflowNames =\n    artifactDownloadWorkflowNames !== null\n      ? artifactDownloadWorkflowNames\n      : [github.context.job]\n  const artifactName = formatArtifactName(name)\n\n  const {GITHUB_BASE_REF = '', GITHUB_REPOSITORY = ''} = process.env\n\n  const [owner, repo] = GITHUB_REPOSITORY.split('/')\n\n  core.info(\n    `Looking for artifact \"${artifactName}\" in the following worflows: ${artifactWorkflowNames.join(\n      ','\n    )}`\n  )\n  for await (const runs of client.paginate.iterator(\n    client.rest.actions.listWorkflowRunsForRepo,\n    {\n      owner,\n      repo,\n      branch: GITHUB_BASE_REF,\n      status: 'success'\n    }\n  )) {\n    for await (const run of runs.data) {\n      if (!run.name) {\n        core.debug(`${run.id} had no workflow name, skipping`)\n        continue\n      }\n\n      if (!inArray(run.name, artifactWorkflowNames)) {\n        core.debug(\n          `${\n            run.name\n          } did not match the following worflows: ${artifactWorkflowNames.join(\n            ','\n          )}`\n        )\n        continue\n      }\n\n      const artifacts = await client.rest.actions.listWorkflowRunArtifacts({\n        owner,\n        repo,\n        run_id: run.id\n      })\n      if (artifacts.data.artifacts.length === 0) {\n        core.debug(`No Artifacts in workflow ${run.id}`)\n        continue\n      }\n      for await (const art of artifacts.data.artifacts) {\n        if (art.expired) {\n          continue\n        }\n\n        if (art.name !== artifactName) {\n          continue\n        }\n\n        core.info(\n          `Downloading the artifact \"${art.name}\" from workflow ${run.name}:${run.id}`\n        )\n        const zip = await client.rest.actions.downloadArtifact({\n          owner,\n          repo,\n          artifact_id: art.id,\n          archive_format: 'zip'\n        })\n\n        const dir = path.join(__dirname, base)\n\n        core.debug(`Making dir ${dir}`)\n        await mkdir(dir, {recursive: true})\n\n        core.debug(`Extracting Artifact to ${dir}`)\n        const adm = new AdmZip(Buffer.from(zip.data as string))\n        adm.extractAllTo(dir, true)\n        return dir\n      }\n    }\n  }\n\n  core.warning(\n    `No artifacts found for the following workspaces: ${artifactWorkflowNames.join(\n      ','\n    )}`\n  )\n  return null\n}\n\n/**\n * Upload Artifacts\n * @param {string[]} files\n * @param {string} name\n * @returns {Promise<artifact.UploadResponse>}\n */\nexport async function uploadArtifacts(\n  files: string[],\n  name: string\n): Promise<artifact.UploadResponse> {\n  const artifactClient = artifact.create()\n  const artifactName = formatArtifactName(name)\n\n  const rootDirectory = '.'\n  const options = {\n    continueOnError: false\n  }\n\n  core.info(\n    `Uploading Artifacts to ${artifactName} on workflow named ${github.context.job}`\n  )\n  return await artifactClient.uploadArtifact(\n    artifactName,\n    files,\n    rootDirectory,\n    options\n  )\n}\n\n/**\n * Parse Coverage file\n * @param {string} filename\n * @returns {Promise<Coverage | null>}\n */\nexport async function parseCoverage(\n  filename: string\n): Promise<Coverage | null> {\n  if (!(await checkFileExists(filename))) {\n    return null\n  }\n\n  const ext = path.extname(filename)\n\n  switch (ext) {\n    case '.xml':\n      {\n        const xml = await parseXML<Cobertura | Clover>(filename)\n\n        if (instanceOfCobertura(xml)) {\n          core.info(`Detected a Cobertura File at ${filename}`)\n          return await parseCobertura(xml)\n        } else if (instanceOfClover(xml)) {\n          core.info(`Detected a Clover File at ${filename}`)\n          return await parseClover(xml)\n        }\n      }\n      break\n    default:\n  }\n\n  return null\n}\n\nexport function createHash(data: crypto.BinaryLike): string {\n  return crypto.createHash('sha256').update(data).digest('hex')\n}\n\n/**\n * Round a percentage\n * @param {number} percentage\n * @returns {number}\n */\nexport function roundPercentage(percentage: number): number {\n  return Math.round((percentage + Number.EPSILON) * 100) / 100\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\n/**\n * Colorize Percentage By Threshold\n * @param percentage\n * @param thresholdMax\n * @param thresholdMin\n * @returns\n */\nexport function colorizePercentageByThreshold(\n  percentage: number | null,\n  thresholdMax = 0,\n  thresholdMin: number | null = null\n): string {\n  if (percentage === null) {\n    return 'N/A'\n  }\n  if (thresholdMin === null) {\n    if (percentage > thresholdMax) {\n      return `🟢 ${percentage.toString()}%`\n    } else if (percentage < thresholdMax) {\n      return `🔴 ${percentage.toString()}%`\n    }\n  } else {\n    if (percentage < thresholdMin) {\n      return `🔴 ${percentage.toString()}%`\n    } else if (percentage >= thresholdMin && percentage <= thresholdMax) {\n      return `🟠 ${percentage.toString()}%`\n    } else if (percentage > thresholdMax) {\n      return `🟢 ${percentage.toString()}%`\n    }\n  }\n\n  return `⚪ ${percentage.toString()}%`\n}\n\n/**\n * Determine a common base path\n *\n * @param {string[]} files\n * @param {string} separator\n * @returns {string}\n */\nexport function determineCommonBasePath(\n  files: string[],\n  separator = '/'\n): string {\n  /**\n   * Given an index number, return a function that takes an array and returns the\n   * element at the given index\n   * @param {number} i\n   * @return {function(!Array<*>): *}\n   */\n  const elAt = (i: number) => (a: string[]) => a[i]\n\n  /**\n   * Given an array of strings, return an array of arrays, containing the\n   * strings split at the given separator\n   */\n  const splitStrings = files.map(i => i.split(separator))\n  /**\n   * Transpose an array of arrays:\n   * Example:\n   * [['a', 'b', 'c'], ['A', 'B', 'C'], [1, 2, 3]] ->\n   * [['a', 'A', 1], ['b', 'B', 2], ['c', 'C', 3]]\n   */\n  const rotated = splitStrings[0].map((e, i) => splitStrings.map(elAt(i)))\n\n  return (\n    rotated\n      //Checks of all the elements in the array are the same.\n      .filter(arr => arr.every(e => e === arr[0]))\n      .map(elAt(0))\n      .join(separator)\n  )\n}\n\nlet inputs: Inputs\n/**\n * Get Formatted Inputs\n *\n * @returns {Inputs}\n */\nexport function getInputs(): Inputs {\n  if (inputs) {\n    return inputs\n  }\n\n  const token = core.getInput('github_token', {required: true})\n  const filename = core.getInput('filename', {required: true})\n  const markdownFilename =\n    core.getInput('markdown_filename') || 'code-coverage-results'\n  const badge = core.getInput('badge') === 'true' ? true : false\n  const overallCoverageFailThreshold = parseInt(\n    core.getInput('overall_coverage_fail_threshold') || '0'\n  )\n  const fileCoverageErrorMin = parseInt(\n    core.getInput('file_coverage_error_min') || '50'\n  )\n  const fileCoverageWarningMax = parseInt(\n    core.getInput('file_coverage_warning_max') || '75'\n  )\n  const failOnNegativeDifference =\n    core.getInput('fail_on_negative_difference') === 'true' ? true : false\n\n  const artifactName = core.getInput('artifact_name') || 'coverage-%name%'\n  if (!artifactName.includes('%name%')) {\n    throw new Error('artifact_name is missing %name% variable')\n  }\n\n  const tempArtifactDownloadWorkflowNames = core.getInput(\n    'artifact_download_workflow_names'\n  )\n  const artifactDownloadWorkflowNames =\n    tempArtifactDownloadWorkflowNames !== ''\n      ? tempArtifactDownloadWorkflowNames.split(',').map(n => n.trim())\n      : null\n\n  inputs = {\n    token,\n    filename,\n    badge,\n    overallCoverageFailThreshold,\n    fileCoverageErrorMin,\n    fileCoverageWarningMax,\n    failOnNegativeDifference,\n    markdownFilename,\n    artifactDownloadWorkflowNames,\n    artifactName\n  }\n\n  return inputs\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfCobertura(object: any): object is Cobertura {\n  return 'coverage' in object && 'packages' in object.coverage\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfClover(object: any): object is Clover {\n  return 'coverage' in object && 'project' in object.coverage\n}\n\n/**\n * Format Artifact Name\n * @param {string} name\n * @returns {string}\n */\nexport function formatArtifactName(name: string): string {\n  const {artifactName} = getInputs()\n  return `${artifactName}`.replace('%name%', name).replace(/\\//g, '-')\n}\n\n/**\n * In Array functionality\n *\n * @param {string} needle\n * @param {string[]} haystack\n * @returns {boolean}\n */\nfunction inArray(needle: string, haystack: string[]): boolean {\n  const length = haystack.length\n  for (let i = 0; i < length; i++) {\n    if (haystack[i] === needle) return true\n  }\n  return false\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(399);\n",""],"names":[],"sourceRoot":""}